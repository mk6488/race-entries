rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && (request.auth.token.admin == true); }

    function isString(x) { return x is string; }
    function isTimestamp(x) { return x is timestamp; }
    function hasOnlyFields(data, allowed) { return data.keys().hasOnly(allowed); }

    function validRace(data) {
      return hasOnlyFields(data, ['name','details','startDate','endDate','broeOpens','broeCloses','drawReleased','archived']) &&
        isString(data.name) && data.name.size() > 0 && data.name.size() <= 200 &&
        isString(data.details) &&
        isTimestamp(data.startDate) &&
        (!('endDate' in data) || data.endDate == null || isTimestamp(data.endDate)) &&
        isTimestamp(data.broeOpens) &&
        isTimestamp(data.broeCloses) &&
        (!('endDate' in data) || data.endDate == null || data.endDate >= data.startDate) &&
        data.broeOpens <= data.broeCloses &&
        (!('drawReleased' in data) || (data.drawReleased is bool)) &&
        (!('archived' in data) || (data.archived is bool));
    }

    // races collection
    match /races/{raceId} {
      allow read: if true; // public read
      // DEV baseline: allow any signed-in user to write. Tighten to isAdmin() for prod.
      allow create: if isSignedIn() && validRace(request.resource.data);
      allow update: if isSignedIn() && validRace(request.resource.data);
      allow delete: if isSignedIn();
    }

    // demo items collection (allow signed-in writes for now)
    match /items/{itemId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // entries for a race
    function validEntry(data) {
      return hasOnlyFields(data, ['raceId','day','div','event','athleteNames','boat','blades','notes','status','crewChanged','withdrawn','rejected','crewNumber','raceTimes','result']) &&
        isString(data.raceId) && data.raceId.size() > 0 &&
        isString(data.day) && isString(data.div) && isString(data.event) && isString(data.athleteNames) &&
        isString(data.boat) && isString(data.blades) && isString(data.notes) &&
        (!('status' in data) || (data.status in ['in_progress','ready','entered','withdrawn','rejected'])) &&
        (!('crewChanged' in data) || (data.crewChanged is bool)) &&
        (!('withdrawn' in data) || (data.withdrawn is bool)) &&
        (!('rejected' in data) || (data.rejected is bool)) &&
        (!('crewNumber' in data) || (data.crewNumber is int && data.crewNumber >= 0)) &&
        (!('raceTimes' in data) || (data.raceTimes is list && data.raceTimes.size() <= 12 && (
          data.raceTimes.size() == 0 || (data.raceTimes[0] is map &&
            data.raceTimes[0].keys().hasOnly(['round','timeMs']) &&
            isString(data.raceTimes[0].round) && (data.raceTimes[0].timeMs is int && data.raceTimes[0].timeMs >= 0)
          )
        ))) &&
        (!('result' in data) || (data.result in ['OK','DNS','DNF','DQ']));
    }
    match /entries/{entryId} {
      allow read: if true;
      allow create: if isSignedIn() && validEntry(request.resource.data);
      // Simplified update rule to avoid using diff() and prevent false denials
      allow update: if isSignedIn() && validEntry(request.resource.data);
      allow delete: if isSignedIn();
    }

    // Division Groups for a race (to group divisions that are simultaneous)
    function validDivisionGroup(data) {
      return data.keys().hasOnly(['raceId','day','group','divisions']) &&
        isString(data.raceId) && data.raceId.size() > 0 &&
        isString(data.day) && isString(data.group) &&
        (data.divisions is list) &&
        (data.divisions.size() == 0 || (data.divisions[0] is string));
    }
    match /divisionGroups/{groupId} {
      allow read: if true;
      allow create: if isSignedIn() && validDivisionGroup(request.resource.data);
      allow update: if isSignedIn() && validDivisionGroup(request.resource.data);
      allow delete: if isSignedIn();
    }

    // Silenced clashes (to acknowledge/ignore a specific boat clash in a group)
    function validSilence(data) {
      return data.keys().hasOnly(['raceId','day','group','boat']) &&
        isString(data.raceId) && data.raceId.size() > 0 &&
        isString(data.day) && isString(data.group) && isString(data.boat);
    }
    match /silencedClashes/{silenceId} {
      allow read: if true;
      allow create: if isSignedIn() && validSilence(request.resource.data);
      allow update: if isSignedIn() && validSilence(request.resource.data);
      allow delete: if isSignedIn();
    }

    // reference data
    match /boats/{boatId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }
    match /blades/{bladeId} {
      allow read: if true;
      allow create, update, delete: if isSignedIn();
    }

    // race-specific gearing matrix for age group x boat type
    function validGearing(data) {
      return data.keys().hasOnly(['values']) && (data.values is map);
    }
    match /gearing/{raceId} {
      allow read: if true;
      allow create: if isSignedIn() && validGearing(request.resource.data);
      allow update: if isSignedIn();
    }

    // blade clash silences (separate from boat silences)
    function validBladeSilence(data) {
      return data.keys().hasOnly(['raceId','day','group','blade']) &&
        isString(data.raceId) && data.raceId.size() > 0 &&
        isString(data.day) && isString(data.group) && isString(data.blade);
    }
    match /silencedBladeClashes/{silenceId} {
      allow read: if true;
      allow create: if isSignedIn() && validBladeSilence(request.resource.data);
      allow update: if isSignedIn() && validBladeSilence(request.resource.data);
      allow delete: if isSignedIn();
    }
  }
}


